<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Charles CSR</title>
    <link>https://charlescsr.github.io/mlnotes/</link>
    <description>Recent content on Charles CSR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://charlescsr.github.io/mlnotes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bar plot</title>
      <link>https://charlescsr.github.io/mlnotes/python/plots/basic-bar-plot/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/plots/basic-bar-plot/</guid>
      <description>import matplotlib.pyplot as plt import pandas as pddata = {&amp;#39;fruits&amp;#39;: [&amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;mango&amp;#39;, &amp;#39;orange&amp;#39;], &amp;#39;price&amp;#39;:[4, 7, 12, 10]}df = pd.DataFrame(data) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    fruits price     0 apple 4   1 banana 7   2 mango 12   3 orange 10     plt.</description>
    </item>
    
    <item>
      <title>Histogram</title>
      <link>https://charlescsr.github.io/mlnotes/python/plots/histogram/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/plots/histogram/</guid>
      <description>import pandas as pd import matplotlib.pyplot as pltdef sent_length(message): return (len(message))data = [&amp;#39;Vachitaya aapuuuuuuuuu&amp;#39;,&amp;#39;Sing in the rain&amp;#39; ,&amp;#39;Great power comes wih great responsibility&amp;#39;] df = pd.DataFrame(data, columns = [&amp;#39;Sent&amp;#39;]) df[&amp;#39;len&amp;#39;] = df[&amp;#39;Sent&amp;#39;].apply(sent_length) plt.hist(df[&amp;#39;len&amp;#39;], bins=15) (array([1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]), array([16. , 17.73333333, 19.46666667, 21.2 , 22.93333333, 24.66666667, 26.4 , 28.13333333, 29.86666667, 31.6 , 33.33333333, 35.06666667, 36.8 , 38.53333333, 40.26666667, 42. ]), &amp;lt;BarContainer object of 15 artists&amp;gt;)  </description>
    </item>
    
    <item>
      <title>Horizontal Bar Chart</title>
      <link>https://charlescsr.github.io/mlnotes/python/plots/horizontal-bar-chart/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/plots/horizontal-bar-chart/</guid>
      <description>import matplotlib.pyplot as plt import pandas as pddata = {&amp;#39;fruits&amp;#39;: [&amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;mango&amp;#39;, &amp;#39;orange&amp;#39;], &amp;#39;price&amp;#39;:[4, 7, 12, 10]}df = pd.DataFrame(data) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    fruits price     0 apple 4   1 banana 7   2 mango 12   3 orange 10     plt.</description>
    </item>
    
    <item>
      <title>Line Plot</title>
      <link>https://charlescsr.github.io/mlnotes/python/plots/line-plot/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/plots/line-plot/</guid>
      <description>import matplotlib.pyplot as plt import pandas as pddata1 = {&amp;#39;objects&amp;#39;: [&amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;mango&amp;#39;, &amp;#39;orange&amp;#39;, &amp;#39;tomato&amp;#39;, &amp;#39;potato&amp;#39;], &amp;#39;price&amp;#39;:[4, 7, 12, 10, 9, 14]}plt.plot(data1[&amp;#39;objects&amp;#39;], data1[&amp;#39;price&amp;#39;]) [&amp;lt;matplotlib.lines.Line2D at 0x7fe35bfb3760&amp;gt;]  </description>
    </item>
    
    <item>
      <title>Plotting Categories using Subplots</title>
      <link>https://charlescsr.github.io/mlnotes/python/plots/plotting-categories/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/plots/plotting-categories/</guid>
      <description>import matplotlib.pyplot as pltdata = {&amp;#39;apple&amp;#39;: 4, &amp;#39;banana&amp;#39;: 7, &amp;#39;mango&amp;#39;: 12, &amp;#39;orange&amp;#39;: 10} fruit_names = list(data.keys()) prices = list(data.values())fig, ax = plt.subplots(1, 3, figsize=(9, 3), sharey=True) ax[0].bar(fruit_names, prices) ax[1].scatter(fruit_names, prices) ax[2].plot(fruit_names, prices) fig.suptitle(&amp;#39;Plottting Categories&amp;#39;) Text(0.5, 0.98, &#39;Plottting Categories&#39;)  </description>
    </item>
    
    <item>
      <title>Subplots that share X axis</title>
      <link>https://charlescsr.github.io/mlnotes/python/plots/subplots/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/plots/subplots/</guid>
      <description>import matplotlib.pyplot as pltdata1 = {&amp;#39;objects&amp;#39;: [&amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;mango&amp;#39;, &amp;#39;orange&amp;#39;, &amp;#39;tomato&amp;#39;, &amp;#39;potato&amp;#39;], &amp;#39;price&amp;#39;:[4, 7, 12, 10, 9, 14]}fig, ax = plt.subplots(2, 1, sharex=True) ax[0].bar(data1[&amp;#39;objects&amp;#39;], data1[&amp;#39;price&amp;#39;]) ax[1].plot(data1[&amp;#39;objects&amp;#39;], data1[&amp;#39;price&amp;#39;]) fig.suptitle(&amp;#39;Subplot example&amp;#39;) Text(0.5, 0.98, &#39;Subplot example&#39;)  </description>
    </item>
    
    <item>
      <title>Violin Plot</title>
      <link>https://charlescsr.github.io/mlnotes/python/plots/violin-plot/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/plots/violin-plot/</guid>
      <description>import matplotlib.pyplot as plt import numpy as npimport numpy as np np.random.seed(10) collectn_1 = np.random.normal(100, 10, 200) collectn_2 = np.random.normal(80, 30, 200) collectn_3 = np.random.normal(90, 20, 200) collectn_4 = np.random.normal(70, 25, 200) data_to_plot = [collectn_1, collectn_2, collectn_3, collectn_4] fig, ax = plt.subplots(1, 1) bp = ax.violinplot(data_to_plot) plt.show() </description>
    </item>
    
    <item>
      <title>Append value to a list</title>
      <link>https://charlescsr.github.io/mlnotes/python/basics/list-append/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/basics/list-append/</guid>
      <description>li = [1, 2, 3]li.append(4)li [1, 2, 3, 4]  </description>
    </item>
    
    <item>
      <title>Custom Lambda DataFrame</title>
      <link>https://charlescsr.github.io/mlnotes/python/pandas/custom-lambda-dataframe/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/pandas/custom-lambda-dataframe/</guid>
      <description>import pandas as pddata = [&amp;#39;Vachitaya aapuuuuuuuuu&amp;#39;,&amp;#39;Sing in the rain&amp;#39; ,&amp;#39;Great power comes wih great responsibility&amp;#39;] df = pd.DataFrame(data, columns = [&amp;#39;Sent&amp;#39;]) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Sent     0 Vachitaya aapuuuuuuuuu   1 Sing in the rain   2 Great power comes wih great responsibility     def sent_length(message): return (len(message))df[&amp;#39;len&amp;#39;] = df[&amp;#39;Sent&amp;#39;].</description>
    </item>
    
    <item>
      <title>Remove stopwords using SpaCy</title>
      <link>https://charlescsr.github.io/mlnotes/python/spacy/spacy-remove-stopwords/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/spacy/spacy-remove-stopwords/</guid>
      <description>#Remove stop words import spacy from spacy.lang.en.stop_words import STOP_WORDS #from string import punctuationsnlp = spacy.load(&amp;#39;en_core_web_md&amp;#39;)def normalize(msg): doc = nlp(msg) res=[] for token in doc: if(token.is_stop or token.is_digit or token.is_punct or not(token.is_oov)): pass else: res.append(token.lemma_.lower()) return res</description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://charlescsr.github.io/mlnotes/python/basics/template/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/basics/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://charlescsr.github.io/mlnotes/python/pandas/template/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/pandas/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://charlescsr.github.io/mlnotes/python/plots/template/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/plots/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://charlescsr.github.io/mlnotes/python/sklearn/template/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/sklearn/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://charlescsr.github.io/mlnotes/python/spacy/template/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/spacy/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Tfidf Vectorizer</title>
      <link>https://charlescsr.github.io/mlnotes/python/sklearn/tfidf-vectorizer/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/sklearn/tfidf-vectorizer/</guid>
      <description>import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizertfidf_vectorizer = TfidfVectorizer()def feature_extraction(msg): mat = pd.DataFrame(tfidf_vectorizer.fit_transform(msg).toarray(),columns=tfidf_vectorizer.get_feature_names(),index=None) return mat</description>
    </item>
    
    <item>
      <title>Train test split</title>
      <link>https://charlescsr.github.io/mlnotes/python/sklearn/train-test-split/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/sklearn/train-test-split/</guid>
      <description>from sklearn.model_selection import train_test_splittrain_x, train_y, test_x, test_y = train_test_split(X, y, test_size=0.3) #0.3 == 30% Test set #Default 25% Test set #My usual value 20% Test set</description>
    </item>
    
    <item>
      <title>Confusion Matrix</title>
      <link>https://charlescsr.github.io/mlnotes/python/sklearn/confusion-matrix/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/sklearn/confusion-matrix/</guid>
      <description>from sklearn.metrics import confusion_matrixC = &amp;#34;Cat&amp;#34; A = &amp;#34;Ant&amp;#34; B = &amp;#34;Bird&amp;#34;true = [C, A, C, C, A, B] pred = [A, A, C, C, A, C]confusion_matrix(true, pred, labels=[A, B, C]) array([[2, 0, 0], [0, 0, 1], [1, 0, 2]])  </description>
    </item>
    
    <item>
      <title>Check Python Version</title>
      <link>https://charlescsr.github.io/mlnotes/python/basics/version-check/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/basics/version-check/</guid>
      <description>!python --version Python 3.7.7  </description>
    </item>
    
    <item>
      <title>Example of Regplot in Seaborn</title>
      <link>https://charlescsr.github.io/mlnotes/python/plots/regplot-example/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/plots/regplot-example/</guid>
      <description>import seaborn as snsx_ex = [1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0] y_ex = [0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1]sns.regplot(x = x_ex, y = y_ex, marker = &amp;#39;*&amp;#39;, color = &amp;#39;b&amp;#39;) &amp;lt;AxesSubplot:&amp;gt;  </description>
    </item>
    
    <item>
      <title>F1 Score example</title>
      <link>https://charlescsr.github.io/mlnotes/python/sklearn/f1-score-example/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/sklearn/f1-score-example/</guid>
      <description>from sklearn.metrics import f1_scoretrue = [0, 1, 2, 0, 1, 2] pred = [0, 2, 1, 0, 0, 1]f1_score(true, pred, average=&amp;#39;macro&amp;#39;) 0.26666666666666666  f1_score(true, pred, average=&amp;#39;micro&amp;#39;) 0.3333333333333333  f1_score(true, pred, average=&amp;#39;weighted&amp;#39;) 0.26666666666666666  </description>
    </item>
    
    <item>
      <title>Method to find best classifier</title>
      <link>https://charlescsr.github.io/mlnotes/python/sklearn/find-the-best-classifier/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/sklearn/find-the-best-classifier/</guid>
      <description>from sklearn.naive_bayes import MultinomialNB from sklearn.naive_bayes import GaussianNB from sklearn.naive_bayes import BernoulliNB from sklearn.svm import SVC from sklearn.neural_network import MLPClassifier from sklearn.ensemble import AdaBoostClassifier from sklearn.tree import DecisionTreeClassifier from sklearn.ensemble import RandomForestClassifier from sklearn.ensemble import GradientBoostingClassifier from sklearn.linear_model import LogisticRegression from sklearn.model_selection import GridSearchCV from sklearn.metrics import f1_score, confusion_matrixclassifiers = { &amp;#39;mnb&amp;#39;: MultinomialNB(), &amp;#39;gnb&amp;#39;: GaussianNB(), &amp;#39;svm1&amp;#39;: SVC(kernel=&amp;#39;linear&amp;#39;), &amp;#39;svm2&amp;#39;: SVC(kernel=&amp;#39;rbf&amp;#39;), &amp;#39;svm3&amp;#39;: SVC(kernel=&amp;#39;sigmoid&amp;#39;), #FOR SVM USE HYPERPARAMETER TUNING TO BETTER UNDERSTAND WHAT TO TAKE &amp;#39;mlp1&amp;#39;: MLPClassifier(), &amp;#39;mlp2&amp;#39;: MLPClassifier(hidden_layer_sizes=[100,100]), &amp;#39;ada&amp;#39;: AdaBoostClassifier(), &amp;#39;dtc&amp;#39;: DecisionTreeClassifer(), &amp;#39;rfc&amp;#39;: RandomForestClassifer(), &amp;#39;gbc&amp;#39;: GradientBoostingClassifer(), &amp;#39;lr&amp;#39;: LogisticRegression() }f1_scores = dict() for classifier in classifiers: clf = classifiers[classifier] clf.</description>
    </item>
    
    <item>
      <title>Rename Column in DataFrame</title>
      <link>https://charlescsr.github.io/mlnotes/python/pandas/column-rename/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/pandas/column-rename/</guid>
      <description>import pandas as pddata = [&amp;#39;Vachitaya aapuuuuuuuuu&amp;#39;,&amp;#39;Sing in the rain&amp;#39; ,&amp;#39;Great power comes wih great responsibility&amp;#39;] df = pd.DataFrame(data, columns = [&amp;#39;Sent&amp;#39;]) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Sent     0 Vachitaya aapuuuuuuuuu   1 Sing in the rain   2 Great power comes wih great responsibility     df.</description>
    </item>
    
    <item>
      <title>Tokenise characters in SpaCy</title>
      <link>https://charlescsr.github.io/mlnotes/python/spacy/tokenise-spacy/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charlescsr.github.io/mlnotes/python/spacy/tokenise-spacy/</guid>
      <description>import spacynlp = spacy.load(&amp;#39;en_core_web_md&amp;#39;)def tokenise(words): res = [] for word in words: doc = nlp(word) for token in doc: res.append(token.text) return ressample_words = [&amp;#34;hi and hello&amp;#34;, &amp;#34;thank you and goodnight&amp;#34;]result = tokenise(sample_words) print(result) [&#39;hi&#39;, &#39;and&#39;, &#39;hello&#39;, &#39;thank&#39;, &#39;you&#39;, &#39;and&#39;, &#39;goodnight&#39;]  </description>
    </item>
    
  </channel>
</rss>